#include <stdio.h>
#include <limits.h>

void fifo(int pages[], int n, int capacity) {
    int frame[capacity], index = 0, pageFaults = 0;
    for (int i = 0; i < capacity; i++) frame[i] = -1;

    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < capacity; j++) {
            if (frame[j] == pages[i]) {
                found = 1;
                break;
            }
        }
        if (!found) {
            frame[index] = pages[i];
            index = (index + 1) % capacity;
            pageFaults++;
        }
        printf("Frame after accessing page %d: ", pages[i]);
        for (int k = 0; k < capacity; k++) 
            printf("%d ", frame[k]);
        printf("\n");
    }
    printf("FIFO Page Faults: %d\n", pageFaults);
}

void lru(int pages[], int n, int capacity) {
    int frame[capacity], recent[capacity], pageFaults = 0;
    for (int i = 0; i < capacity; i++) frame[i] = -1;

    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < capacity; j++) {
            if (frame[j] == pages[i]) {
                found = 1;
                recent[j] = i;
                break;
            }
        }
        if (!found) {
            int min = INT_MAX, replaceIndex = -1;
            for (int j = 0; j < capacity; j++) {
                if (frame[j] == -1) {
                    replaceIndex = j;
                    break;
                }
                if (recent[j] < min) {
                    min = recent[j];
                    replaceIndex = j;
                }
            }
            frame[replaceIndex] = pages[i];
            recent[replaceIndex] = i;
            pageFaults++;
        }
        printf("Frame after accessing page %d: ", pages[i]);
        for (int k = 0; k < capacity; k++) 
            printf("%d ", frame[k]);
        printf("\n");
    }
    printf("LRU Page Faults: %d\n", pageFaults);
}

void optimal(int pages[], int n, int capacity) {
    int frame[capacity], pageFaults = 0;
    for (int i = 0; i < capacity; i++) frame[i] = -1;

    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < capacity; j++) {
            if (frame[j] == pages[i]) {
                found = 1;
                break;
            }
        }
        if (!found) {
            int replaceIndex = -1, farthest = -1;
            for (int j = 0; j < capacity; j++) {
                int nextIndex = -1;
                for (int k = i + 1; k < n; k++) {
                    if (frame[j] == pages[k]) {
                        nextIndex = k;
                        break;
                    }
                }
                if (nextIndex == -1) {
                    replaceIndex = j;
                    break;
                }
                if (nextIndex > farthest) {
                    farthest = nextIndex;
                    replaceIndex = j;
                }
            }
            frame[replaceIndex] = pages[i];
            pageFaults++;
        }
        printf("Frame after accessing page %d: ", pages[i]);
        for (int k = 0; k < capacity; k++) 
            printf("%d ", frame[k]);
        printf("\n");
    }
    printf("Optimal Page Faults: %d\n", pageFaults);
}

int main() {
    int n, capacity;

    printf("Enter number of pages: ");
    scanf("%d", &n);
    int pages[n];
    printf("Enter the page reference string: ");
    for (int i = 0; i < n; i++) scanf("%d", &pages[i]);

    printf("Enter the number of frames: ");
    scanf("%d", &capacity);

    printf("\n--- FIFO Page Replacement ---\n");
    fifo(pages, n, capacity);

    printf("\n--- LRU Page Replacement ---\n");
    lru(pages, n, capacity);

    printf("\n--- Optimal Page Replacement ---\n");
    optimal(pages, n, capacity);

    return 0;
}
