#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

using namespace std;

void roundRobin(vector<int>& processes, vector<int>& burstTimes, int timeQuantum) {
    int n = processes.size();
    vector<int> remainingBurstTimes = burstTimes;
    vector<int> waitingTimes(n, 0);
    vector<int> turnaroundTimes(n, 0);
    int time = 0;

    // Process until all burst times are 0
    while (true) {
        bool done = true;

        for (int i = 0; i < n; i++) {
            if (remainingBurstTimes[i] > 0) {
                done = false; // There is a pending process

                if (remainingBurstTimes[i] > timeQuantum) {
                    // Increment time by timeQuantum
                    time += timeQuantum;
                    remainingBurstTimes[i] -= timeQuantum;
                } else {
                    // If remaining burst time is less than or equal to timeQuantum
                    time += remainingBurstTimes[i];
                    waitingTimes[i] = time - burstTimes[i];
                    remainingBurstTimes[i] = 0;
                }
            }
        }

        if (done) {
            break;
        }
    }

    // Calculate turnaround time for each process
    for (int i = 0; i < n; i++) {
        turnaroundTimes[i] = burstTimes[i] + waitingTimes[i];
    }

    // Display results
    cout << "Process\tBurst Time\tWaiting Time\tTurnaround Time\n";
    for (int i = 0; i < n; i++) {
        cout << processes[i] << "\t\t" << burstTimes[i] << "\t\t"
             << waitingTimes[i] << "\t\t" << turnaroundTimes[i] << endl;
    }

    // Calculate average waiting time and turnaround time
    double avgWaitingTime = accumulate(waitingTimes.begin(), waitingTimes.end(), 0.0) / n;
    double avgTurnaroundTime = accumulate(turnaroundTimes.begin(), turnaroundTimes.end(), 0.0) / n;

    cout << "\nAverage Waiting Time: " << avgWaitingTime << endl;
    cout << "Average Turnaround Time: " << avgTurnaroundTime << endl;
}

int main() {
    vector<int> processes = {1, 2, 3, 4};       // Process IDs
    vector<int> burstTimes = {24, 3, 3, 6};     // Burst times for each process
    int timeQuantum = 4;

    roundRobin(processes, burstTimes, timeQuantum);

    return 0;
}